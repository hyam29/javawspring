<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javawspring.dao.DbShopDAO">
	<select id="getCategoryMainOne" resultType="com.spring.javawspring.vo.DbProductVO">
		select * from categoryMain where categoryMainCode = #{categoryMainCode} or categoryMainName = #{categoryMainName};
	</select>
	
	<select id="getCategoryMain" resultType="com.spring.javawspring.vo.DbProductVO">
		select * from categoryMain order by categoryMainCode desc;
	</select>
	
	
	<select id="getCategoryMiddleOne" resultType="com.spring.javawspring.vo.DbProductVO">
		<if test="vo.categoryMiddleCode == ''">
			select * from categoryMiddle where categoryMainCode = #{vo.categoryMainCode}; <!-- 대분류삭제 전 중분류 유무 체크 -->
		</if>
		<!-- <if test="categoryMiddleCode != '' or categoryMiddleName != ''"> 배타적 작성을 위해 아래와 같이 작성 원래는 이게 더 정확함 -->
		<if test="vo.categoryMiddleCode != ''">
			select *
			from categoryMiddle
			where categoryMainCode = #{vo.categoryMainName} and categoryMiddleCode = #{vo.categoryMiddleName} and categoryMiddleName = #{vo.categoryMiddleName}
		</if>
	</select>
	<!-- 
	<select id="getCategoryMiddleOne" resultType="com.spring.javawspring.vo.DbProductVO">
		select * from categoryMiddle where categoryMainCode = #{vo.categoryMainCode};
	</select>
	-->
	<select id="getCategoryMiddle" resultType="com.spring.javawspring.vo.DbProductVO">
		select middle.*, main.categoryMainName as categoryMainName
		from categoryMiddle middle, categoryMain main
		where middle.categoryMainCode = main.categoryMainCode
		order by middle.categoryMiddleCode desc;
	</select>
	
	<select id="getCategorySubOne" resultType="com.spring.javawspring.vo.DbProductVO">
    <if test='vo.categorySubCode eq null or vo.categorySubCode eq ""'>
  	  select * from categorySub where categoryMiddleCode = #{vo.categoryMiddleCode};
  	</if>
    <if test='vo.categorySubCode neq null and vo.categorySubCode neq ""'>
  	  select * from categorySub 
  	  where categoryMiddleCode = #{vo.categoryMiddleCode} and 
  	    (categoryMainCode = #{vo.categoryMainCode} and categoryMiddleCode = #{vo.categoryMiddleCode} and categorySubName = #{vo.categorySubName});
    </if>
  </select>
  
  <select id="getCategorySub" resultType="com.spring.javawspring.vo.DbProductVO">
  	select * 
  	from categorySub sub, categoryMiddle middle, categoryMain main 
  	where sub.categoryMainCode=main.categoryMainCode and sub.categoryMiddleCode=middle.categoryMiddleCode
  	order by sub.categorySubCode desc;
  </select>
  
  <select id="getDbProductOne" resultType="com.spring.javawspring.vo.DbProductVO">
  	select * from dbProduct where substring(productCode,4,3) = #{categorySubCode};  <!-- 상품코드 : A0100125 --> 
  </select>
  
  <select id="getCategoryMiddleName" resultType="com.spring.javawspring.vo.DbProductVO">
  	select * from categoryMiddle where categoryMainCode = #{categoryMainCode}; 
  </select>
	
	<select id="getProductMaxIdx" resultType="com.spring.javawspring.vo.DbProductVO">
		<!-- 자료가 없어서 null이라면, 내림차순 정렬하여 최대값 하나만 보여줌 (오류방지) -->
		select * from dbProduct order by idx desc limit 1;
	</select>
	
	<select id="getSubTitle" resultType="com.spring.javawspring.vo.DbProductVO">
		select categorySubName from categorySub group by categorySubName order by categorySubName;
	</select>
	
	<select id="getDbShopList" resultType="com.spring.javawspring.vo.DbProductVO">
		<if test='part == "전체"'>
			select * from dbProduct order by idx desc;
		</if>
		<if test='part != "전체"'>
			select product.*, sub.categorySubName from dbProduct where product, categorySub sub 
			where sub.categorySubName = #{part} and substring(product.productCode,4,3) = sub.categorySubCode order by idx desc;
		</if>
	</select>
	
	<select id="getCategorySubName" resultType="com.spring.javawspring.vo.DbProductVO">
		select * from categorySub where categoryMainCode = #{categoryMainCode} and categoryMiddleCode = #{categoryMiddleCode};
	</select>
	
	<select id="getDbShopProduct" resultType="com.spring.javawspring.vo.DbProductVO">
		select * from dbProduct where idx = #{idx};
	</select>
	
	<select id="getDbShopOption" resultType="com.spring.javawspring.vo.DbOptionVO">
		select * from dbOption where productIdx = #{productIdx} order by idx;
	</select>
	
	<select id="getProductInfor" resultType="com.spring.javawspring.vo.DbProductVO">
		select product.*, main.categoryMainName, middle.categoryMiddleName, sub.categorySubName
  	from dbProduct product, categoryMain main, categoryMiddle middle, categorySub sub
  	where productName=#{productName} order by idx limit 1;
	</select>
		<!-- select product.*, main.categoryMainName, middle.categoryMiddleName, sub.categorySubName 
		from dbProduct product, categoryMain main, categoryMiddle middle, categorySub sub
		where productName = #{productName} order by idx limit 1; -->
	<!-- limit 1 안해주면 error (중복될리는 없지만 작성해줘야 함...?) -->
	
	<select id="getCategoryProductName" resultType="com.spring.javawspring.vo.DbProductVO">
		select * from dbProduct 
		where categoryMainCode = #{categoryMainCode} and categoryMiddleCode = #{categoryMiddleCode} and categorySubCode = #{categorySubCode};
	</select>
	
	<!-- getDbShopOption과 동일하므로 같이 사용하기 -->
	<select id="getOptionList" resultType="com.spring.javawspring.vo.DbOptionVO">
		select * from dbOption where productIdx = #{productIdx} order by optionName;
	</select>
	
	<select id="getOptionSame" resultType="int">
		select count(*) from dbOption where productIdx = #{productIdx} and optionName = #{optionName};
	</select>
	
	<select id="getDbCartProductOptionSearch" resultType="com.spring.javawspring.vo.DbCartVO">
		select * from dbCart where productName = #{productName} and optionName = #{optionName} and mid = #{mid};
	</select>
	
	<select id="getDbCartList" resultType="com.spring.javawspring.vo.DbCartVO">
		select * from dbCart where mid = #{mid} order by idx;
	</select>
	
	<!-- vo에 변수명을 maxIdx로 설정해둬서 as maxIdx 작성 필수 -->
	<select id="getOrderMaxIdx" resultType="com.spring.javawspring.vo.DbOrderVO">
		select max(idx) as maxIdx from dbOrder;
	</select>
	
	<select id="getCartIdx" resultType="com.spring.javawspring.vo.DbCartVO">
		select * from dbCart where idx = #{idx};
	</select>
	
	<!-- mid = 전체 : 관리자 / mid ! = : 사용자 -->
	<select id="totRecCnt" resultType="int">
    <if test='mid == "전체"'>
      select count(*) from dbOrder
      where date(orderDate) = substring(now(),1,10);
    </if>
    <if test='mid != "전체"'>
      select count(baesong.idx) from dbOrder oder join dbBaesong baesong using(orderIdx), member2 member
      where member.mid = #{mid} and date(orderDate) = substring(now(),1,10);
    </if>
  </select>
  
  <!-- date(orderDate) = substring(now(),1,10) : 오늘날짜에 해당하는 부분만 가져오는 코드 -->
  <select id="getMyOrderList" resultType="com.spring.javawspring.vo.DbBaesongVO">
    <if test='mid == "전체"'>
      SELECT oder.*,baesong.* 
      from dbOrder oder join dbBaesong baesong using(orderIdx) 
      where date(orderDate) = substring(now(),1,10)
      order by baesong.idx desc limit #{startIdxNo},#{pageSize};
    </if>
    <if test='mid != "전체"'>
      SELECT oder.*,baesong.* 
      from dbOrder oder join dbBaesong baesong using(orderIdx) 
      where baesong.mid=#{mid} and date(orderDate) = substring(now(),1,10)
      order by baesong.idx desc limit #{startIdxNo},#{pageSize};
    </if>
  </select>
  
  <select id="totRecCntMyOrderStatus" resultType="int">
    <if test="mid == '전체'">
      SELECT count(*) from dbOrder;
    </if>
    <if test="mid != '전체' and conditionOrderStatus == '전체'">
        SELECT count(*)
        from dbOrder a join dbBaesong b using(orderIdx) 
        <![CDATA[ where b.mid=#{mid} and date(orderDate) >= date(#{startJumun}) and date(orderDate) <= date(#{endJumun}) order by orderDate desc ]]>;
    </if>
    <if test="mid != '전체' and conditionOrderStatus != '전체'">
        SELECT count(*)
        from dbOrder a join dbBaesong b using(orderIdx) 
        <![CDATA[ where b.mid=#{mid} and date(orderDate) >= date(#{startJumun}) and date(orderDate) <= date(#{endJumun}) and b.orderStatus=#{conditionOrderStatus} order by orderDate desc ]]>;
    </if>
  </select>
  
  <select id="getMyOrderStatus" resultType="com.spring.javawspring.vo.DbBaesongVO">
    <if test="conditionOrderStatus == '전체'">
      SELECT o.*,b.* 
      from dbOrder o join dbBaesong b using(orderIdx) 
      <![CDATA[ where b.mid=#{mid} and date(orderDate) >= date(#{startJumun}) and date(orderDate) <= date(#{endJumun}) ]]> 
      order by b.idx desc 
      limit #{startIdxNo},#{pageSize};
     </if>
    <if test="conditionOrderStatus != '전체'">
      SELECT o.*,b.* 
      from dbOrder o join dbBaesong b using(orderIdx) 
      <![CDATA[ where b.mid=#{mid} and date(orderDate) >= date(#{startJumun}) and date(orderDate) <= date(#{endJumun}) and b.orderStatus=#{conditionOrderStatus} ]]> 
      order by b.idx desc
      limit #{startIdxNo},#{pageSize};
    </if>
  </select>
  
  <select id="totRecCntAdminStatus" resultType="int">
    <if test="orderStatus == '전체'">
      select count(*) from dbOrder a join dbBaesong b using(orderIdx) <![CDATA[ where date(orderDate) >= date(#{startJumun}) and date(orderDate) <= date(#{endJumun}) order by orderDate desc ]]>;
    </if>
    <if test="orderStatus != '전체'">
      select count(*) from dbOrder a join dbBaesong b using(orderIdx) <![CDATA[ where date(orderDate) >= date(#{startJumun}) and date(orderDate) <= date(#{endJumun}) and b.orderStatus=#{orderStatus} order by orderDate desc ]]>;
    </if>
  </select>
  
  <select id="getAdminOrderStatus" resultType="com.spring.javawspring.vo.DbBaesongVO">
    <if test='orderStatus == "전체"'>
      select a.*,b.* from dbOrder a join dbBaesong b using(orderIdx) <![CDATA[ where date(orderDate) >= date(#{startJumun}) and date(orderDate) <= date(#{endJumun}) order by orderDate desc ]]> limit #{startIdxNo},#{pageSize};
    </if>
    <if test='orderStatus != "전체"'>
      select a.*,b.* from dbOrder a join dbBaesong b using(orderIdx) <![CDATA[ where date(orderDate) >= date(#{startJumun}) and date(orderDate) <= date(#{endJumun}) and b.orderStatus=#{orderStatus} order by orderDate desc ]]> limit #{startIdxNo},#{pageSize};
    </if>
  </select>
  
	
	
	<insert id="setCategoryMainInput">
		insert into categoryMain values (#{vo.categoryMainCode}, #{vo.categoryMainName});
	</insert>
	
	<insert id="setCategoryMiddleInput">
		insert into categoryMiddle values (#{vo.categoryMainCode}, #{vo.categoryMiddleCode}, #{vo.categoryMiddleName});
	</insert>
	
	<insert id="setCategorySubInput">
    insert into categorySub values (#{vo.categoryMainCode}, #{vo.categoryMiddleCode}, #{vo.categorySubCode}, #{vo.categorySubName});
  </insert>
  
  <insert id="setDbProductInput">
  	insert into dbProduct value (#{vo.idx},#{vo.categoryMainCode},#{vo.categoryMiddleCode},#{vo.categorySubCode},#{vo.productCode},#{vo.productName},#{vo.detail},#{vo.mainPrice},#{vo.fSName},#{vo.content});
  </insert>
  
  <insert id="setDbOptionInput">
  	insert into dbOption values (default, #{vo.productIdx}, #{vo.optionName}, #{vo.optionPrice});
  </insert>
  
  <insert id="setDbShopCartInput">
  	insert into dbCart values (default,default,#{vo.mid},#{vo.productIdx},#{vo.productName},#{vo.mainPrice},#{vo.thumbImg},#{vo.optionIdx},#{vo.optionName},#{vo.optionPrice},#{vo.optionNum},#{vo.totalPrice});
  </insert>
  
  <insert id="setDbOrder">
  	insert into dbOrder values (default,#{vo.orderIdx},#{vo.mid},#{vo.productIdx},default,#{vo.productName},#{vo.mainPrice},#{vo.thumbImg},#{vo.optionName},#{vo.optionPrice},#{vo.optionNum},#{vo.totalPrice});
  </insert>
  
  <insert id="setDbBaesong">
    insert into dbBaesong values (default,#{baesongVo.oIdx},#{baesongVo.orderIdx},#{baesongVo.orderTotalPrice},#{baesongVo.mid},#{baesongVo.name},#{baesongVo.address},#{baesongVo.tel},#{baesongVo.message},#{baesongVo.payment},#{baesongVo.payMethod},default);
  </insert>
  
  
  
  <update id="setDbShopCartUpdate">
  	update dbCart set optionNum = #{vo.optionNum}, totalPrice = totalPrice + #{vo.totalPrice} 
  	where productName = #{vo.productName} and optionName = #{vo.optionName};
  </update>
  
  <update id="setMemberPointPlus">
  	update member2 set point = point + #{point} where mid = #{mid};
  </update>
  
  <update id="setOrderStatusUpdate">
  	update dbBaesong set orderStatus = #{orderStatus} where orderIdx = #{orderIdx};
  </update>
  
	
	
	<delete id="setCategoryMainDelete">
		delete from categoryMain where categoryMainCode = #{categoryMainCode};
	</delete>
	
	 <delete id="setCategoryMiddleDelete">
    delete from categoryMiddle where categoryMiddleCode = #{categoryMiddleCode};
  </delete>
  
  <delete id="setCategorySubDelete">
    delete from categorySub where categorySubCode = #{categorySubCode};
  </delete>
  
  <delete id="setOptionDelete">
    delete from dbOption where idx = #{idx};
  </delete>
  
  <delete id="dbCartDelete">
    delete from dbCart where idx = #{idx};
  </delete>
  
  <delete id="dbCartDeleteAll">
    delete from dbCart where idx = #{idx};
  </delete>
</mapper>

